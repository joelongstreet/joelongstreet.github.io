extends ./src/_layout.jade

block article
  header.contained
    h1= title
    h2= excerpt


  section.sit-left.intro
    .contained
      .content
        p At a place of former employment, the Director of First Impressions (Annie) got stuck with the repetitive task of cross checking employee data across internal platforms. HR and the intranet team both kept their own employee records - data merging and verification was completed manually by Annie.
        p Annie had a set of very repetitive, error prone, difficult tasks:


  section.sit-center.padded.tasks
    .contained
      .content
        ul
          li Receive a spreadsheet from HR with sets of employee data organized by department
          li Visit various individual employee profile pages on the corporate intranet
          li Check each page manually to verify the data on the HR spreadsheet matched the given profile


  section.sit-center.padded
    .contained
      .content
        p What she really wanted to do is pull filtered employee data from the intranet in the form of a spreadsheet. She could then use excel to automate her task.
        p I definitely felt for her and I’m glad she approached me with the problem. But, as a member of the intranet team, I was hesitant to add this functionality directly into the application. It was such a fringe case and our feature request list was already unmanageable. 
        p When Todd and I designed the intranet, we knew requests like this would come up. The entire interface of the application was abstracted from the server using various REST services. But, we had yet to setup oauth, application registration, and other tools necessary for external app API usage.
        p To solve Annie’s problem, I <a href='https://github.com/joelongstreet/Annie' target='_blank'>created a Chrome extension in her name</a>. It used the intranet’s maintained UI filtering system as well as it’s REST query services. It allowed her to download filtered data as a csv and kept us from having to make site wide changes for a single use case.


  section.sit-center.cake
    .contained
      .content
        img(src='/public/img/annie-cake.jpg')


  section.sit-center.padded
    .contained
      .content
        p I later found out that lots of other people started using this plugin in ways I didn’t expect:
        ul
          li compile lists for their department (email, signups, quick lookups)
          li compile property averages for employees based on department, role, and location (eg. what location has the averaged longest tenure).
        p The corporate intranet is not open source, but <a href='https://github.com/joelongstreet/Annie' target='_blank'>Annie the chrome extension</a> is!


block extras
  style(type='text/css').
    .intro {
      background: url('/public/img/orphan-annie-pin.jpg') no-repeat;
      background-position: center bottom;
      padding-bottom: 200px;
      background-size: 200px;
    }
    .tasks{
      background-color: rgba(0,0,0,.8);
      color: white;
      text-align: center;
    }
    .tasks li{
      list-style-type: none;
      padding-bottom: 30px;
      margin-left: 0px;
      text-align: center;
      font-style: italic;
    }
    .cake img{
      display: block;
      width: 50%;
      margin: auto;
    }
    .tasks li:last-child{
      padding-bottom: 0;
    }
    @media only screen and (min-width : 800px) {
      .intro{
        background-position: 90% 0;
        padding-bottom: 0;
        background-size: contain;
      }
    }
